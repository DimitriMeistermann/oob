% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.R
\name{computeColorScaleFun}
\alias{computeColorScaleFun}
\title{Compute a color scale function from numeric values by interpolation}
\usage{
computeColorScaleFun(
  colors,
  values,
  useProb = FALSE,
  probs = NULL,
  minProb = 0.05,
  maxProb = 0.95,
  midColorIs0 = FALSE,
  returnColorFun = TRUE,
  returnGGscale = FALSE,
  geomAes = "fill",
  geomArgument = list()
)
}
\arguments{
\item{colors}{A character vector containing the colors.}

\item{values}{A numeric vector of the value to has to be mapped to colors.}

\item{useProb}{Logical. Use quantile probability to map the colors. Else the
min and max of values will be mapped to first and last color and
interpolated continuously.}

\item{probs}{A numeric vector (between 0 and 1) same length as color or NULL.
Quantile probability of the values that will be mapped to colors.}

\item{minProb}{A numeric value (between 0 and 1). If \code{useProb=TRUE} and
\code{probs=NULL} this will be the quantile of the value for the first color,
quantile will be mapped continuously as to the maxProb.}

\item{maxProb}{A numeric value (between 0 and 1).}

\item{midColorIs0}{Logical. Force that 0 return the midColor.}

\item{returnColorFun}{Logical.Return converted values to colors or the scale
function.}

\item{returnGGscale}{Logical. Return a ggplot2 gradiantn scale.}

\item{geomAes}{"fill" or "color". Ggplot layer that will receive the scale.}

\item{geomArgument}{list of additional argument to pass to the ggplot2
gradiantn scale.}
}
\value{
A vector of colors, or a function if \code{returnColorFun=TRUE} or a
ggplot scale if \code{returnGGscale=TRUE}.
}
\description{
Compute a color scale function from numeric values by interpolation
}
\examples{
values=sort(rnorm(100))

plotPalette(computeColorScaleFun(
    colors = c("black", "red"),
    values = values,
    returnColorFun = FALSE
))
plotPalette(computeColorScaleFun(
    colors = c("blue", "white", "red"),
    values = values,
    returnColorFun = FALSE
))
plotPalette(
    computeColorScaleFun(
        colors = c("blue", "white", "red"),
        values = values,
        returnColorFun = FALSE,
        midColorIs0 = TRUE
    )
)
plotPalette(
    computeColorScaleFun(
        colors = c("blue", "white", "red"),
        values = values,
        returnColorFun = FALSE,
        useProb = TRUE
    )
)
plotPalette(
    computeColorScaleFun(
        colors = c("blue", "white", "red"),
        values = values,
        returnColorFun = FALSE,
        useProb = TRUE,
        probs = c(.25, .5, .75)
    )
)

colorFun <-
    computeColorScaleFun(
        colors = c("blue", "white", "red"),
        values = values,
        returnColorFun = TRUE,
        useProb = TRUE
    )
plotPalette(c(colorFun(-1), colorFun(0), colorFun(1)))

dat <- data.frame(x = rnorm(10),
                  y = rnorm(10),
                  expr = rnorm(10))
ggplot(dat, aes(x = x, y = y, fill = expr)) +
    geom_point(size = 5, shape = 21) + theme_bw() +
    computeColorScaleFun(
        colors = c("blue", "white", "red"),
        values = dat$expr,
        returnGGscale = TRUE,
        useProb = TRUE,
        geomAes = "fill"
    )
}
