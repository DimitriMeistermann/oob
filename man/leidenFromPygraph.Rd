% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clustering.R
\name{leidenFromPygraph}
\alias{leidenFromPygraph}
\title{Compute a Leiden clustering from K Nearest Neighbors graph from python igraph.}
\usage{
leidenFromPygraph(
  pygraph,
  returnAsFactor = FALSE,
  n_iterations = -1,
  resolution_parameter = 0.5,
  seed = 666,
  laplacian_init = TRUE,
  initial_membership = NULL,
  max_comm_size = 0L,
  node_sizes = NULL,
  weight_parameter = NULL,
  partition_type = c("RBConfigurationVertexPartition", "ModularityVertexPartition",
    "RBERVertexPartition", "CPMVertexPartition", "MutableVertexPartition",
    "SignificanceVertexPartition", "SurpriseVertexPartition")
)
}
\arguments{
\item{pygraph}{A python igraph object as computed by \code{adjMat2Pygraph}.}

\item{returnAsFactor}{If TRUE return the clusters attributions as a factor vector and not as characters.}

\item{n_iterations}{Number of iterations. If the number of iterations is negative, the Leiden algorithm is run until an iteration in which there was no improvement.}

\item{resolution_parameter}{A parameter controlling the coarseness of the clusters.}

\item{seed}{Seed for the random number generator. By default uses a random seed if nothing is specified.}

\item{laplacian_init}{Derive edge weights from the Laplacian matrix, otherwise weights are derived from the distance between cells. Not used for the moment.}

\item{initial_membership}{Initial membership for the partition. If MULL then defaults to a singleton partition.}

\item{max_comm_size}{Maximal total size of nodes in a community. If zero (the default), then communities can be of any size.}

\item{node_sizes}{Vector of numerics. The quality function takes into account the size of a community, which is defined as the sum over the sizes of each individual node. By default, the node sizes are set to 1, meaning that the size of a community equals the number of nodes of a community. If a node already represents an aggregation, this could be reflect in its node size.}

\item{weight_parameter}{Weight of the graph as a numeric value for each edge.  Not used for the moment.}

\item{partition_type}{Type of partition to use. Defaults to RBConfigurationVertexPartition. Options include: ModularityVertexPartition, RBERVertexPartition, CPMVertexPartition, MutableVertexPartition, SignificanceVertexPartition, SurpriseVertexPartition (see the Leiden python module documentation for more details).}
}
\value{
A vector of character or factor if \code{returnAsFactor}, same length as number of nodes in the graph. Cluster attribution of samples.
}
\description{
Compute a Leiden clustering from K Nearest Neighbors graph from python igraph.
}
\examples{
data("bulkLogCounts")
umapWithNN<-UMAP(bulkLogCounts,ret_nn = TRUE)
pygraph<-adjMat2Pygraph(getAdjMatfromUMAPWithNN(umapWithNN))
proj2d(umapWithNN$embedding,colorBy = leidenFromPygraph(pygraph))
}
