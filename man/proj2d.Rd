% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/projPlots.R
\name{proj2d}
\alias{proj2d}
\title{Plot a 2D projection.}
\usage{
proj2d(
  coord,
  colorBy = NULL,
  axis = c(1, 2),
  pointSize = 3,
  plotText = FALSE,
  main = NULL,
  alpha = 9/10,
  ellipse = FALSE,
  emph = NULL,
  colorScale = NULL,
  returnGraph = FALSE,
  legendTitle = "Values",
  axis.names = NULL,
  na.color = "grey50",
  na.bg = TRUE,
  plotFactorsCentroids = FALSE,
  pointStroke = 1/8,
  strokeColor = "black",
  funAutoColorScale = oobColors,
  fixedCoord = TRUE,
  plotLabelRepel = FALSE,
  labelSize = 3,
  sizeProp2Dens = FALSE,
  densEps = 1,
  nnMatrix = NULL,
  nnSegmentParam = list(alpha = 0.75, size = 0.1),
  useScatterMore = FALSE,
  customRatio = NULL
)
}
\arguments{
\item{coord}{Matrix or dataframe containing at least two vectors of numeric corresponding to the x/y coordinates.}

\item{colorBy}{A vector of factor or numeric same size as number of samples in PCA. Color each point on the projection by its corresponding value.}

\item{axis}{A vector of 2 integer. The column index of \code{coord} containing respectively the x and y coordinates.}

\item{pointSize}{Single numeric. Size of points.}

\item{plotText}{Logical. Plot sample instead of point.}

\item{main}{Single character. Main title of the graph.}

\item{alpha}{Single numeric (from 0 to 1). Opacity of the points.}

\item{ellipse}{Logical. Add stat_ellipse to the projection (eventually several ellipses if colorBy is a factor).}

\item{emph}{Single character or \code{NULL}. Must be a level of \code{colorBy} if it is a factor. Emphasize a particular value on the plot.}

\item{colorScale}{A vector of colors. Equal to the desired number of breaks for continuous values or number of levels for factors.}

\item{returnGraph}{Logical. Return the graph as a ggplot object instead of printing it.}

\item{legendTitle}{Character. The legend title on the plot.}

\item{axis.names}{Vector of two characters. Axis names (x, y) showed on the plot.}

\item{na.color}{Character. Color of NA values if \code{ColorBy} is provided.}

\item{na.bg}{Logical. Put the NA points behind the others in term of layers.}

\item{plotFactorsCentroids}{Logical. If \code{ColorBy} is a factor Display the name of the factor at the centroid of its points.}

\item{pointStroke}{Numeric. Width of points border.}

\item{strokeColor}{Character. Color of points border.}

\item{funAutoColorScale}{A function that return n colors with n as a first argument. Responsible for color mapping of the levels.}

\item{fixedCoord}{Logical. The ratio of the plot is representative of the ratio between x and y values.}

\item{plotLabelRepel}{Logical. Plot the rownames of the coordinates as a ggrepel label of each point.}

\item{labelSize}{Numeric. Size of the labels if \code{plotLabelRepel=TRUE}.}

\item{sizeProp2Dens}{Logical. Size of point is inversely proportional to the 2D density of its area.}

\item{densEps}{Numeric. Radius of the eps-neighborhood, i.e., bandwidth of the uniform kernel). Used if \code{sizeProp2Dens=TRUE}.}

\item{nnMatrix}{A matrix of integer, number of row equal to the number of points, as returned by \code{make.umap(..., ,ret_nn = TRUE)}. Plot segments between the neighbors.}

\item{nnSegmentParam}{List of arguments for customizing the nn segments. Passed to \code{geom_segment}.}

\item{useScatterMore}{Logical. Use \code{geom_scatter} for making the plot. Render the points as a pixel image, difficult to modify afterward but quicker plotting for very large datasets.}

\item{customRatio}{Single numeric. Custom ratio for the plot.}
}
\value{
Plot in the current graphical device or a ggplot object if \code{returnGraph=TRUE}.
}
\description{
Plot a 2D projection.
}
\examples{
data(iris)

proj2d(iris)
proj2d(iris, axis = c(1, 3))

proj2d(iris, pointSize = .1)
proj2d(iris,
       axis.names = c("Width of sepal", "Length of sepal") ,
       main = "Two features from iris")


proj2d(
    iris,
    colorBy = iris$Species,
    ellipse = TRUE,
    plotFactorsCentroids = TRUE,
    legendTitle = "Species"
)
proj2d(
    iris,
    colorBy = iris$Species,
    pointStroke = 3,
    strokeColor = "grey"
)

proj2d(
    iris,
    colorBy = iris$Species,
    emph = "setosa",
    na.color = "white"
)
proj2d(iris, colorBy = iris$Species, returnGraph = TRUE) +
    geom_vline(xintercept = 6)

proj2d(iris,
       colorBy = iris$Species,
       colorScale = c("blue", "white", "red"))
proj2d(iris,
       colorBy = iris$Species,
       funAutoColorScale = mostDistantColor)
proj2d(
    iris,
    colorBy = iris$Petal.Length,
    legendTitle = "Petal.Length",
    fixedCoord = FALSE
)
proj2d(
    iris,
    colorBy = iris$Petal.Length,
    legendTitle = "Petal.Length",
    colorScale = c("blue", "white", "red")
)

proj2d(iris, plotLabelRepel = TRUE)
proj2d(iris, sizeProp2Dens = TRUE)
proj2d(iris, sizeProp2Dens = TRUE, densEps = 2)

umap <-
    UMAP(
        scale(iris[, c(seq_len(4))]),
        ret_nn = TRUE,
        transpose = FALSE,
        n_neighbors = nrow(iris)
    )

proj2d(umap)
proj2d(umap,
       colorBy = iris$Species ,
       nnMatrix = umap$nn$euclidean$idx[, seq_len(3)])
proj2d(
    umap,
    colorBy = iris$Species,
    useScatterMore = TRUE,
    pointSize = 5
)
}
